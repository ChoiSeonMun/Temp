- 훈련생들 모두가 중/하 수준의 점수를 획득 하였으므로 훈련생들이 훈련 커리큘럼과 맞지 않는 기초적인 질문에도 많은 답변이 필요할 것으로 예상됨.

- 매번 사전 평가를 본 후 느끼는 것이지만, 프로그래밍과 비전공 학생 뿐만 아니라 프로그래밍 관련 전공자인 학생들도 게임 프로그래밍 관련 경험이 적기 때문에 그 부분은 감안해서 강의를 진행할 필요성이 있음.
- 사전 평가 점수를 기반으로 과정 시작 후 '게임 알고리즘' 교과목 진행 시 점수 중위 그룹과 하위 그룹을 구성하여 다음과 같은 조 편성을 실시할 예정.

1 그룹 : 주진수, 이동기, 정재호, 정세아
2 그룹 : 어우석, 김도익, 강민호, 최연철
3 그룹 : 김윤하, 최희지, 송윤수, 김찬수
4 그룹 : 유태우, 김규법, 공민석, 엄종하
5 그룹 : 유재광, 홍성재, 김창연
6 그룹 : 이찬혁, 나은수, 김민영, 이진우

- 훈련생 대부분 관련 과목 및 과정에 대해서 수강한 경험이 없기 때문에, 능력 단위 내용 진행 시 기술적인 부분을 나가기 이전에 기본적인 개념을 먼저 이해하는데 중점을 둘 예정

- 과정 중간에 수강 포기자가 나오거나, 점수 하위 그룹 훈련생들의 실력이 점수 중위 그룹 훈련생과 수준이 비슷해지거나, 반대로 점수 중위 그룹 훈련생들의 실력이 점수 하위 그룹 훈련생보다 낮아질 경우, 조 편성을 다시 할 예정. 훈련생의 성취도를 분명하게 확인하기 위해 성취도 평가지를 이용할 예정.

- NCS 능력 단위 수행 준거를 기준으로 교육을 진행하되 조별 프로젝트 및 조별 실습인 경우 구성주의 교육 방식도 검토하여 진행할 예정이다.

===================================================================

* 교수 방향(방법)

- 규모가 큰 게임회사에서는 순서가 서류 면접 - 온라인 코딩테스트 - 1차 기술면접 - 2차 기술면접 - 3차 인성 면접 식으로 구성됨.

- 규모가 중간 및 스타트업 포함에서는 포트폴리오가 잘 만들어져있어야 면접으로 이어지고, 기술면접 및 때에 따라서는 코딩테스트도 이루어질 수 있음.

- 대부분의 훈련생들은 비전공자들이 많기 때문에 규모가 큰 곳보다는 중간 및 스타트업이 알맞다고 판단하고 포트폴리오를 잘 만들 수 있는 방안으로 우선 준비.

- 이론을 통하여 언어기본기 및 알고리즘 등이 어떤 원리인지 교재에 근거하여 충분히 설명하고 실제 코드를 통한 실습을 통하여 후에 포트폴리오에 넣을 수 있도록 배양.

- 코딩테스트 준비 역시 그에 필요한 기초 프로그래밍 기본기, 알고리즘, 자료구조 등에 이론적으로 설명하고 어떤 문제해결에 사용되는지 이론적으로 접근하며, 기술 면접에 단골 질문으로 나오는 부분 역시 교재로 교육 시에 숙지 시킴.

- 학습 피라미드에 의하면 수동적 학습보다는 참여적 학습일 때가 가장 높은 학습 효율을 보여줌. 따라서 점수 중위 그룹과 점수 하위 그룹의 훈련생을 적절하게 섞어 팀을 구성하고, 서로 가르치게 함.

- 직업 특성상 취업 후에도 계속해서 학습해 나가야 함. 따라서 스스로 정보를 찾고, 분류하고, 학습하는 능력을 기를 수 있도록 과제를 이용해 수업과 관련된 심화적인 내용을 공부해 보고서로 정리하게 함.

- 훈련과정의 면학 분위기를 조성하기 위해서는 훈련생 간 협력심과 친목이 필요함. 이를 증진하기 위해 훈련과정과 연관된 주제에 대해 팀별 발표를 준비하게 함. 또, 가장 우수한 팀에게는 시상하여 훈련생의 동기를 불러 일으킴.

* 학습 방향(방법)

- C# 언어의 특성에는 무엇이 있고 이것을 어떤 식으로 활용할 수 있는지 학습.
- 기술 면접 단골 예상 질문에 해당하는 언어 기본기 및 상용 게임엔진에 해당하는 내용을 숙지.
- 자료구조의 종류에 대한 자료를 제공하고 각 특징에 대해 조사.
- 알고리즘 책을 통하여 정렬 알고리즘 및 정렬 알고리즘 활용한 방식에 대해 실습.


* 피드백:
실제 결과물에서의 구현 상태를 보고 실무적인 내용을 피드백.

1. 문제해결 시나리오
- 알고리즘을 통한 게임 컨텐츠 연출 구현 시 다양한 종류의 알고리즘들 중에서 어떤 것을 써야하고 왜 써야하는지 다시 설명해준다.
- 결과물 컨텐츠 구현을 잘하고도 설명을 잘못할 시 어떤 식으로 어필을 해야하는지 설명해준다.
- 최종 결과물에 대해 기능적으로 구현이 올바른지에 대해 점검을 설명한다.

2. 포트폴리오
- 실제 컨텐츠를 구현하였을 때 기능에 대해 충분히 설계방향이 세워졌고 그에 따른 논리로 구현하였는지 설명.
- 코드의 내용에서 효율적인 최적화가 이루어졌는지, 아닌지에 대해 피드백.
- 결과물에서 주요 기능이 나중에 취업문서 (ex. 기술문서)에 어떤식으로 어필이 되는지 설명.